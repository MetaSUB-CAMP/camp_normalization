'''Workflow for the CAMP Normalization module.'''


from contextlib import redirect_stderr
import os
from os.path import abspath, basename, dirname, join
import pandas as pd
import shutil
from utils import Workflow_Dirs, ingest_samples
from itertools import chain


# Load and/or make the working directory structure
dirs = Workflow_Dirs(config['work_dir'], 'normalization')


# Load sample names and input files 
SAMPLES = ingest_samples(config['samples'], dirs.TMP)


# Specify the location of any external resources and scripts
# dirs_ext = join(dirname(abspath(__file__)), 'ext')
dirs_ext = join(config['workflow_dir'], 'ext')
dirs_scr = join(dirs_ext, 'scripts')


METHODS_d = {'scaling' : ['tss', 'tmm'],
             'coda' : ['clr', 'alr', 'ilr'],
             'transformation' : ['blom', 'npn'],
             'batch' : ['combat', 'limma']}
METHODS_l = list(chain.from_iterable(METHODS_d.values()))

rule all:
    input:
        expand(join(dirs.OUT, '{sample}_{method}.csv'), sample=SAMPLES, method=METHODS_l)


# TODO: add log to rules

rule dataprep:
    input:
        #'test_data/{sample}.csv'
        sample_csv = join(dirs.TMP, '{sample}.csv')
    output:
        prepped_sample = join(dirs.OUT, '{sample}_prepped.csv')
    conda:
        'normalization'
    params:
        data_prep_scr = join(dirs_scr, 'data-prep.R')
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input.sample_csv} {output.prepped_sample}
        """

rule tss:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_tss.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'tss'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """

rule uq:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_uq.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'uq'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """
        
rule med:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_med.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'med'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """
        
rule css:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_css.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'css'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """
        
rule clr:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_clr.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'clr'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """

rule alr:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_alr.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'alr'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """
        
rule ilr:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_ilr.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'ilr'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """
        
rule blom:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_blom.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'blom'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """
        
rule npn:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_npn.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'npn'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """

rule tmm:
    input:
        join(dirs.OUT, '{sample}_prepped.csv')
    output:
        join(dirs.OUT, '{sample}_tmm.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'tmm'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input} _ {params.method} {output}
        """
rule combat:
    input:
        sample = join(dirs.OUT, '{sample}_prepped.csv'),
        metadata = join(dirs.TMP, '{sample}_metadata.csv')
    output:
        join(dirs.OUT, '{sample}_combat.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'combat'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input.sample} {input.metadata} {params.method} {output}
        """
        
rule limma:
    input:
        sample = join(dirs.OUT, '{sample}_prepped.csv'),
        metadata = join(dirs.TMP, '{sample}_metadata.csv')
    output:
        join(dirs.OUT, '{sample}_limma.csv')
    params:
        data_prep_scr = join(dirs_scr, 'normalizer.R'),
        method = 'limma'
    conda:
        'normalization'
    shell:
        """
        Rscript --vanilla {params.data_prep_scr} {input.sample} {input.metadata} {params.method} {output}
        """


